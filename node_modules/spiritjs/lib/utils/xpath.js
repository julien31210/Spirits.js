'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getExpression = getExpression;
exports.getElement = getElement;

var _is = require('./is');

/**
 * Get DOM representation for an element.
 *
 * @param   {HTMLElement}                 element
 * @param   {null|undefined|HTMLElement}  nodeContext
 * @returns {string|null}
 */
function getExpression(element) {
  var nodeContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  var paths = [];

  var isNodeContext = function isNodeContext() {
    if (!nodeContext) {
      return true;
    }
    return nodeContext !== element;
  };

  while (element.nodeType === window.Node.ELEMENT_NODE && isNodeContext()) {
    var index = 0;

    for (var sibling = element.previousSibling; sibling; sibling = sibling.previousSibling) {
      if (sibling.nodeType === window.Node.DOCUMENT_TYPE_NODE) {
        continue;
      }
      if (sibling.nodeName === element.nodeName) {
        ++index;
      }
    }

    var tagName = element.nodeName.toLowerCase();
    var pathIndex = '[' + (index + 1) + ']';

    if ((0, _is.isSVG)(element)) {
      tagName = '*[local-name()=\'' + tagName + '\']';
    }

    paths.unshift(tagName + pathIndex);
    element = element.parentNode;
  }

  if (paths.length === 0) {
    return null;
  }
  return nodeContext ? paths.join('/') : '/' + paths.join('/');
}

/**
 * Get an element from expression
 *
 * @param {string}      expression
 * @param {HTMLElement} nodeContext
 * @returns {HTMLElement|null}
 */
function getElement(expression) {
  var nodeContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  if (!nodeContext) {
    nodeContext = document.body;
  }

  var evaluated = document.evaluate(expression, nodeContext, null, window.XPathResult.ANY_TYPE, null);
  return evaluated.iterateNext();
}