'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.has = has;
exports.ensure = ensure;
exports.getPreviousFrame = getPreviousFrame;
exports.generateTimeline = generateTimeline;

var _config = require('../config/config');

var _config2 = _interopRequireDefault(_config);

var _loadscript = require('./loadscript');

var _loadscript2 = _interopRequireDefault(_loadscript);

var _timeline = require('../group/timeline');

var _timeline2 = _interopRequireDefault(_timeline);

var _debug = require('./debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Check on gsap presence
 *
 * @returns {boolean}
 */
function has() {
  return !!(_config2.default.gsap.tween && _config2.default.gsap.timeline);
}

/**
 * Ensure gsap is loaded
 * Auto inject gsap if configured
 *
 * @returns {Promise}
 */
function ensure() {
  if (has()) {
    return Promise.resolve();
  }

  if (!_config2.default.gsap.autoInject) {
    if (_debug2.default) {
      console.warn('\n      \n        It seems that you have disabled autoInject. GSAP can not be found by Spirit.\n        Please make sure you provide the tween and timeline to Spirit.\n      \n        For example:\n        \n        spirit.setup({\n          tween: TweenMax,\n          timeline: TimelineMax\n        })\n        \n        Or enable the autoInject "spirit.config.gsap.autoInject = true".\n        \n      ');
    }

    return Promise.reject(new Error('GSAP not found.'));
  }

  if (_debug2.default) {
    console.warn('\n      \n      GSAP is being fetched from CDN: ' + _config2.default.gsap.autoInjectUrl + '.\n      If you already have GSAP installed, please provide it to Spirit:\n      \n        spirit.setup({\n          tween: TweenMax,\n          timeline: TimelineMax\n        })\n      \n      You want to use another cdn? Change it here:\n       \n        spirit.config.gsap.autoInjectUrl = \'https://cdn.xxx\'\n      \n    ');
  }

  return (0, _loadscript2.default)(_config2.default.gsap.autoInjectUrl).then(function () {
    _config2.default.gsap.tween = window.TweenMax;
    _config2.default.gsap.timeline = window.TimelineMax;

    return Promise.resolve();
  });
}

/**
 * Get previous frame for param on transition
 *
 * @param   {Transition}  transition
 * @param   {Param}       param
 * @returns {number}
 */
function getPreviousFrame(transition, param) {
  var tr = transition;
  var result = void 0;

  while (tr && !result) {
    tr = tr._prev;
    if (tr && tr.params.get(param.prop)) {
      result = tr;
    }
  }
  return result ? result.frame : 0;
}

/**
 * Generate timeline from data
 *
 * @param {Timeline} tl
 */
function generateTimeline(tl) {
  if (!tl || !(tl instanceof _timeline2.default)) {
    throw new Error('Need valid timeline data to generate GSAP timeline from');
  }

  if (!_config2.default.gsap.timeline) {
    throw new Error('GSAP not set. Please make sure GSAP is available.');
  }

  if (tl.type !== 'dom') {
    throw new Error('Timeline invalid. Needs a timeline with type of dom.');
  }

  var timeline = new _config2.default.gsap.timeline({ // eslint-disable-line new-cap
    useFrames: true,
    paused: true
  });

  tl.transitions.each(function (tr) {
    tr.params.each(function (param) {
      var start = getPreviousFrame(tr, param);
      var duration = tr.frame - start;
      var params = _extends({}, param.toObject(), { ease: tr.ease });

      timeline.to(tl.transformObject, duration, params, start);
    });
  });

  return timeline;
}