'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _list = require('../list/list');

var _list2 = _interopRequireDefault(_list);

var _group = require('../group');

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Registry = function (_List) {
  _inherits(Registry, _List);

  function Registry() {
    _classCallCheck(this, Registry);

    return _possibleConstructorReturn(this, (Registry.__proto__ || Object.getPrototypeOf(Registry)).call(this, []));
  }

  /**
   * Add unique group
   *
   * @param {Group} group
   */


  _createClass(Registry, [{
    key: 'add',
    value: function add(group) {
      if (!(group instanceof _group.Group)) {
        throw new Error('Invalid group. Only Group instances allowed.');
      }

      if (!this.groupNames().includes(group.name)) {
        if (_utils.debug) {
          console.warn('registry.add() Group "' + group.name + '" added to registry (spirit.groups) and can be resolved by Spirit app');
        }
        _get(Registry.prototype.__proto__ || Object.getPrototypeOf(Registry.prototype), 'add', this).call(this, group);
      } else {
        if (_utils.debug) {
          console.warn('registry.add() Group "' + group.name + '" already exist in registry. Skip registry (spirit.groups)');
        }
      }
    }

    /**
     * Get group by name
     *
     * @param   {string} name
     * @returns {Group}
     */

  }, {
    key: 'get',
    value: function get(name) {
      return this.list.find(function (g) {
        return g.name === name;
      });
    }

    /**
     * Get all group names from registry
     *
     * @returns {Array}
     */

  }, {
    key: 'groupNames',
    value: function groupNames() {
      return this.list.map(function (g) {
        return g.name;
      });
    }
  }]);

  return Registry;
}(_list2.default);

exports.default = new Registry();
module.exports = exports['default'];