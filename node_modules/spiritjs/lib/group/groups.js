'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _list = require('../list/list');

var _list2 = _interopRequireDefault(_list);

var _group = require('./group');

var _group2 = _interopRequireDefault(_group);

var _config = require('../config/config');

var _config2 = _interopRequireDefault(_config);

var _utils = require('../utils');

var _registry = require('../registry/registry');

var _registry2 = _interopRequireDefault(_registry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Groups = function (_List) {
  _inherits(Groups, _List);

  /**
   * Create a groups instance.
   *
   * @param {HTMLElement} rootEl define the animation root
   * @param {Array} data
   */
  function Groups() {
    var rootEl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    _classCallCheck(this, Groups);

    var _this = _possibleConstructorReturn(this, (Groups.__proto__ || Object.getPrototypeOf(Groups)).call(this, data, _group2.default, [{ name: 'untitled' }]));

    _this.rootEl = null;


    if (!(rootEl instanceof window.HTMLElement)) {
      throw new Error('No root element provided.');
    }
    _this.rootEl = rootEl;

    // add groups to registry
    _this.each(function (g) {
      return _registry2.default.add(g);
    });
    return _this;
  }

  /**
   * Add group to list and global registry
   *
   * @param   {Array|*} group
   * @returns {Array|*}
   */


  _createClass(Groups, [{
    key: 'add',
    value: function add(group) {
      var affected = _get(Groups.prototype.__proto__ || Object.getPrototypeOf(Groups.prototype), 'add', this).call(this, group);

      Array.isArray(affected) ? affected.forEach(function (g) {
        return _registry2.default.add(g);
      }) : _registry2.default.add(affected);

      return affected;
    }

    /**
     * Remove group from list and global registry
     *
     * @param   {Array|*} group
     * @returns {Array|*}
     */

  }, {
    key: 'remove',
    value: function remove(group) {
      var affected = _get(Groups.prototype.__proto__ || Object.getPrototypeOf(Groups.prototype), 'remove', this).call(this, group);

      Array.isArray(affected) ? affected.forEach(function (g) {
        return _registry2.default.remove(g);
      }) : _registry2.default.remove(affected);

      return affected;
    }

    /**
     * Construct all groups
     *
     * @returns {Array.<TimelineLite|TimelineMax>}
     */

  }, {
    key: 'construct',
    value: function construct() {
      if (!_config2.default.gsap.timeline || !_config2.default.gsap.tween) {
        if (_utils.debug) {
          console.warn('\n            Trying to construct groups, but GSAP cannot be found.\n            \n            Did you forgot to call spirit.setup() ?\n            \n            spirit.setup() usage:\n            \n                // auto inject gsap from cdn:\n                spirit.setup()\n                \n                // or provide gsap instances manually:\n                spirit.setup({\n                  tween:    TweenMax,\n                  timeline: TimelineMax\n                })\n          ');
        }
        throw new Error('GSAP cannot be found');
      }
      return this.list.map(function (group) {
        return group.construct();
      });
    }

    /**
     * Get group by name
     *
     * @param   {string} name
     * @returns {Group|undefined}
     */

  }, {
    key: 'get',
    value: function get(name) {
      return this.list.find(function (group) {
        return group.name === name;
      });
    }
  }]);

  return Groups;
}(_list2.default);

exports.default = Groups;
module.exports = exports['default'];