'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = require('events');

var _is = require('../utils/is');

var is = _interopRequireWildcard(_is);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * List
 *
 * @fires List#add
 * @fires List#remove
 * @fires List#change:list
 */
var List = function (_EventEmitter) {
  _inherits(List, _EventEmitter);

  /**
   * Create List
   *
   * @param {Array}           items
   * @param {*}               model
   * @param {Array|undefined} defaultModelArgs
   */
  function List() {
    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var model = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var defaultModelArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

    _classCallCheck(this, List);

    var _this = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this));

    _this._list = [];
    _this._model = null;
    _this._duplicates = true;
    _this._sortOn = false;
    _this._linkedList = false;

    _this.setMaxListeners(Infinity);

    _this._model = model;

    if (model) {
      var testProto = defaultModelArgs !== undefined ? new (Function.prototype.bind.apply(model, [null].concat(_toConsumableArray(defaultModelArgs))))() // eslint-disable-line new-cap
      : new model(); // eslint-disable-line new-cap

      if (typeof testProto.toObject !== 'function') {
        throw new Error('Invalid Model prototype. model.toObject does not exist.');
      }
    }

    if (!Array.isArray(items)) {
      throw new Error('Items should be an array');
    }

    // parse initial list
    _this._list = items.reduce(function (list, item) {
      if (_this._model) {
        if (item instanceof _this._model) {
          item._list = _this;
          if (item.setupBubbleEvents && typeof item.setupBubbleEvents === 'function') {
            item.setupBubbleEvents();
          }
          list.push(item);
        } else {
          if (is.isObject(item) && typeof model.fromObject === 'function') {
            var itemFromModel = model.fromObject(item);
            itemFromModel._list = _this;
            if (itemFromModel.setupBubbleEvents && typeof itemFromModel.setupBubbleEvents === 'function') {
              itemFromModel.setupBubbleEvents();
            }
            list.push(itemFromModel);
          } else {
            throw new Error('Could not parse item from model');
          }
        }
      } else {
        list.push(item);
      }
      return list;
    }, []);
    return _this;
  }

  /**
   * Get list to allow duplicates
   *
   * @returns {boolean|object}
   */


  _createClass(List, [{
    key: 'checkOnDuplicates',


    /**
     * Check current list on duplicates
     */
    value: function checkOnDuplicates() {
      var dup = this._duplicates;
      var uniq = false;

      // check based on boolean
      if (typeof dup === 'boolean' && dup === false) {
        uniq = this.list.map(function (item) {
          return { count: 1, item: item };
        }).reduce(function (a, b) {
          a[b.item] = (a[b.item] || 0) + b.count;
          return a;
        }, {});
      }

      // check based on object property
      if (is.isObject(dup) && dup.hasOwnProperty('prop')) {
        uniq = this.list.map(function (item) {
          return { count: 1, prop: item[dup.prop] };
        }).reduce(function (a, b) {
          a[b.prop] = (a[b.prop] || 0) + b.count;
          return a;
        }, {});
      }

      if (uniq && Object.keys(uniq).filter(function (a) {
        return uniq[a] > 1;
      }).length > 0) {
        throw new Error('List has duplicates');
      }
    }

    /**
     * Get the sort type of this list
     *
     * @returns {boolean|string}
     */

  }, {
    key: 'sort',


    /**
     * Sort list based on sort type
     */
    value: function sort() {
      var so = this._sortOn;

      // sort on primitives
      if (typeof so === 'boolean' && so === true) {
        this._list = this._list.sort();
      }

      // sort on property
      if (typeof so === 'string') {
        this._list = this._list.sort(function (a, b) {
          return a[so] - b[so];
        });
      }
    }

    /**
     * Is current list linked?
     *
     * @returns {boolean}
     */

  }, {
    key: 'linkItems',


    /**
     * Link items to each other as a linked list based on sortOn
     * if this list is setup as a linked list
     */
    value: function linkItems() {
      if (this._linkedList) {
        for (var i = 0; i < this._list.length; i++) {
          if (is.isObject(this._list[i])) {
            this._list[i]._prev = i > 0 ? this._list[i - 1] : null;
            this._list[i]._next = i < this._list.length - 1 ? this._list[i + 1] : null;
          } else {
            throw new Error('Can not link primitives.');
          }
        }
      }
    }

    /**
     * Get the list
     *
     * @returns {Array}
     */

  }, {
    key: 'at',


    /**
     * Get the value at index
     *
     * @param   {number} index
     * @returns {*}
     */
    value: function at(index) {
      if (index >= this._list.length) {
        throw new Error('Index exceeded. Requested ' + index + ', have length of ' + this.length);
      }

      return this._list[index];
    }

    /**
     * Add item to list
     *
     * @param   {*|Array} item
     * @fires   List#add
     * @returns {*}
     */

  }, {
    key: 'add',
    value: function add(item) {
      var _this2 = this;

      var result = null;

      var addSingle = function addSingle(i) {
        var newItem = void 0;

        if (_this2._model) {
          if (i instanceof _this2._model) {
            newItem = i;
            newItem._list = _this2;
            if (newItem.setupBubbleEvents && typeof newItem.setupBubbleEvents === 'function') {
              newItem.setupBubbleEvents();
            }
          } else if (is.isObject(i) && typeof _this2._model.fromObject === 'function') {
            newItem = _this2._model.fromObject(i);
            newItem._list = _this2;
            if (newItem.setupBubbleEvents && typeof newItem.setupBubbleEvents === 'function') {
              newItem.setupBubbleEvents();
            }
          } else {
            throw new Error('Invalid item.');
          }
        } else {
          newItem = i;
        }

        Array.isArray(result) ? result.push(newItem) : result = newItem;

        _this2._list.push(newItem);

        /**
         * List event.
         *
         * @event List#add
         * @type {*}
         */
        _this2.emit('add', newItem);
      };

      if (Array.isArray(item)) {
        result = [];
        item.forEach(addSingle);
      } else {
        addSingle(item);
      }

      this.checkOnDuplicates();
      this.sort();
      this.linkItems();

      return result;
    }

    /**
     * Remove item from list
     *
     * @fires List#remove
     * @param {*|Array} item
     */

  }, {
    key: 'remove',
    value: function remove(item) {
      var _this3 = this;

      var result = null;

      var removeSingle = function removeSingle(i) {
        var doRemove = function doRemove(ins) {
          var index = _this3._list.indexOf(ins);
          if (index > -1) {
            _this3._list.splice(index, 1);

            if (ins._list && ins._list instanceof List) {
              ins._list = null;
            }

            if (is.isObject(ins)) {
              if ('_prev' in ins) {
                delete ins._prev;
              }

              if ('_next' in ins) {
                delete ins._next;
              }
            }

            /**
             * List event.
             *
             * @event List#remove
             * @type {*}
             */
            _this3.emit('remove', ins);

            Array.isArray(result) ? result.push(ins) : result = ins;
          }
        };

        if (_this3._model) {
          if (i instanceof _this3._model) {
            doRemove(i);
          }
        } else {
          doRemove(i);
        }
      };

      if (Array.isArray(item)) {
        result = [];
        item.forEach(removeSingle);
      } else {
        removeSingle(item);
      }

      this.sort();
      this.linkItems();

      return result;
    }

    /**
     * Clear the list
     */

  }, {
    key: 'clear',
    value: function clear() {
      this.each(this.remove.bind(this));
    }

    /**
     * Walk over each item
     *
     * @returns {*}
     */

  }, {
    key: 'each',
    value: function each(cb) {
      return [].concat(_toConsumableArray(this.list)).forEach(cb);
    }

    /**
     * Get an object representation of this list
     *
     * @returns {Array}
     */

  }, {
    key: 'toArray',
    value: function toArray() {
      var l = this._model ? this.list.map(function (item) {
        return item.toObject();
      }) : this.list;

      return l.reduce(function (a, b) {
        if (is.isObject(b)) {
          var obj = _extends({}, b);
          delete obj._prev;
          delete obj._next;
          delete obj._list;

          a.push(obj);
        } else {
          a.push(b);
        }

        return a;
      }, []);
    }
  }, {
    key: 'duplicates',
    get: function get() {
      return this._duplicates;
    }

    /**
     * Set list to allow duplicates
     *
     * @param {boolean|object} dup
     *
     * When dup is an object it can check on a property
     * @example { prop: 'id' }
     */
    ,
    set: function set(dup) {
      this._duplicates = dup;
      this.checkOnDuplicates();
    }
  }, {
    key: 'sortOn',
    get: function get() {
      return this._sortOn;
    }

    /**
     * Set the sort type of this list
     *
     * @param {boolean|string} sortType
     */
    ,
    set: function set(sortType) {
      this._sortOn = sortType;
      this.sort();
    }
  }, {
    key: 'linkedList',
    get: function get() {
      return this._linkedList;
    }

    /**
     * Set current list as a linked list
     *
     * @param {boolean} linked
     */
    ,
    set: function set(linked) {
      this._linkedList = linked;
      this.linkItems();
    }
  }, {
    key: 'list',
    get: function get() {
      return this._list;
    }

    /**
     * Reset the list
     *
     * @param {Array} l
     * @fires List#change:list
     */
    ,
    set: function set(l) {
      if (!Array.isArray(l)) {
        throw new Error('List should be an array');
      }

      this._list = l;

      if (this._linkedList) {
        this.linkItems();
      }

      /**
       * List event.
       *
       * @event List#change:list
       * @type {Array}
       */
      this.emit('change:list', l);
    }

    /**
     * Get the length of list
     *
     * @returns {Number}
     */

  }, {
    key: 'length',
    get: function get() {
      return this.list.length;
    }
  }]);

  return List;
}(_events.EventEmitter);

List.Events = ['change:list', 'add', 'remove'];

exports.default = List;
module.exports = exports['default'];